Ques 1 : Write a function void printLinkedList(Node* head) that traverses a singly linked list and prints each element's value.
Input: A linked list with elements 10 20 30 40
Output: 10 20 30 40



#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node* next;
    
    Node(int val) {
        data = val;
        next = nullptr;
    }
};

void insertAtEnd(Node*& head, int data) {
    Node* newNode = new Node(data);
    
    if (head == nullptr) {
        head = newNode;
    } else {
        Node* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void printLinkedList(Node* head) {
    Node* temp = head;
    while (temp != nullptr) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

int main() {
    Node* head = nullptr;
    int n, data;

    cout << "Enter the number of elements in the linked list: ";
    cin >> n;

    cout << "Enter the elements: ";
    for (int i = 0; i < n; i++) {
        cin >> data;
        insertAtEnd(head, data);
    }

    cout << "Linked list elements: ";
    printLinkedList(head);
    
    return 0;
}





















Ques 2: Write a function void insertAtEnd(Node*& head, int data) that inserts a new node with the given data at the end of a
singly linked list. nput: A linked list with elements 10 20 30, and a new data 40
Output: The linked list becomes 10 20 30 40







#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node* next;
    
    Node(int val) {
        data = val;
        next = nullptr;
    }
};

void insertAtEnd(Node*& head, int data) {
    Node* newNode = new Node(data);
    
    if (head == nullptr) {
        head = newNode;
    } else {
        Node* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void printLinkedList(Node* head) {
    Node* temp = head;
    while (temp != nullptr) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

int main() {
    Node* head = nullptr;
    int n, data;

    cout << "Enter the number of elements in the list: ";
    cin >> n;

    cout << "Enter the elements: ";
    for (int i = 0; i < n; i++) {
        cin >> data;
        insertAtEnd(head, data);
    }

    cout << "Enter the new data to insert at the end: ";
    cin >> data;

    insertAtEnd(head, data);

    cout << "Linked list after insertion: ";
    printLinkedList(head);
    
    return 0;
}

